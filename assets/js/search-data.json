{
  
    
        "post0": {
            "title": "List and dictionary",
            "content": "Initial records . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) . Additional record . InfoDb.append({ &quot;FirstName&quot;: &quot;Delsurone&quot;, &quot;LastName&quot;: &quot;K&quot;, &quot;DOB&quot;: &quot;Dec 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;delsurone@poway.org&quot;, &quot;Owns_Cars&quot;: [&quot;2016-Honda&quot;, &quot;2013-Lexus&quot;, &quot;2003-Toyota&quot;, &quot;1997-Volvo&quot;, &quot;1969-GMC&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Srudeleon&quot;, &quot;LastName&quot;: &quot;K&quot;, &quot;DOB&quot;: &quot;Mar 13&quot;, &quot;Residence&quot;: &quot;Atlanta&quot;, &quot;Email&quot;: &quot;srudeleon@poway.org&quot;, &quot;Owns_Cars&quot;: [&quot;2005-Accura&quot;, &quot;2012-MINI&quot;] }) . Print function . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() . Print method 1 . # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Delsurone K Residence: San Diego Birth Day: Dec 7 Cars: 2016-Honda, 2013-Lexus, 2003-Toyota, 1997-Volvo, 1969-GMC Srudeleon K Residence: Atlanta Birth Day: Mar 13 Cars: 2005-Accura, 2012-MINI . Print method 2 . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Delsurone K Residence: San Diego Birth Day: Dec 7 Cars: 2016-Honda, 2013-Lexus, 2003-Toyota, 1997-Volvo, 1969-GMC Srudeleon K Residence: Atlanta Birth Day: Mar 13 Cars: 2005-Accura, 2012-MINI . Print method 3 . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Delsurone K Residence: San Diego Birth Day: Dec 7 Cars: 2016-Honda, 2013-Lexus, 2003-Toyota, 1997-Volvo, 1969-GMC Srudeleon K Residence: Atlanta Birth Day: Mar 13 Cars: 2005-Accura, 2012-MINI . A for loop with an index . def for_loop2(): print(&quot;For loop output n&quot;) for idx in range(len(InfoDb)): print_data(InfoDb[idx]) for_loop2() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Delsurone K Residence: San Diego Birth Day: Dec 7 Cars: 2016-Honda, 2013-Lexus, 2003-Toyota, 1997-Volvo, 1969-GMC Srudeleon K Residence: Atlanta Birth Day: Mar 13 Cars: 2005-Accura, 2012-MINI . Output data in a reverse order . def for_loop3(): print(&quot;For loop output n&quot;) for idx in range(len(InfoDb) - 1, -1, -1): print_data(InfoDb[idx]) for_loop3() . For loop output Srudeleon K Residence: Atlanta Birth Day: Mar 13 Cars: 2005-Accura, 2012-MINI Delsurone K Residence: San Diego Birth Day: Dec 7 Cars: 2016-Honda, 2013-Lexus, 2003-Toyota, 1997-Volvo, 1969-GMC Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . Create new or add to dictionary data set with input . def print_data2(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;School Name:&quot;, d_rec[&quot;SchoolName&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Grade:&quot;, d_rec[&quot;Grade&quot;]) print() # Keys for new DB NewInfoDbKeys = [&quot;FirstName&quot;, &quot;LastName&quot;, &quot;SchoolName&quot;, &quot;Grade&quot;] NewInfoDb = [] while (1): print() TempDict = {} # temp dictionary for Keys in NewInfoDbKeys: print(&quot;Please type &quot; + Keys) userInput = input() TempDict[Keys] = userInput NewInfoDb.append(TempDict) # add a dictionary # ask user to continue print(&quot;Do you want to continue?&quot;) userInput = input() if userInput != &#39;yes&#39;: print(&quot;Ok we will stop n&quot;) break else: print(&quot; nPut next info&quot;) def for_loop4(): for idx in range(len(NewInfoDb)): print_data2(NewInfoDb[idx]) for_loop4() . Please type FirstName Please type LastName Please type SchoolName Please type Grade Do you want to continue? Ok we will stop John Smith School Name: DNHS Grade: 99.99 .",
            "url": "https://hs61999.github.io/delsurone/list_dict/",
            "relUrl": "/list_dict/",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Post1",
            "content": "Delsurone Posts example . Link example . Personal pages | Markdown pages | Jupyter notebook pages | . Images example . .",
            "url": "https://hs61999.github.io/delsurone/post1/",
            "relUrl": "/post1/",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by Delsurone 1. . a blogger who is learning fastpages. &#8617; . |",
          "url": "https://hs61999.github.io/delsurone/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Sticky Notes",
          "content": "My sticky note 1 . My sticky note 2 .",
          "url": "https://hs61999.github.io/delsurone/sticky_notes/",
          "relUrl": "/sticky_notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hs61999.github.io/delsurone/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}